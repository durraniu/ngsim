{
  "hash": "23eb3d7a8d09473beccc6fbf997d9db7",
  "result": {
    "markdown": "---\ntitle: Transform Data with Python\ndate: '2024-01-21'\ncategories:\n  - import\n  - transform\n  - pandas\n  - polars\n  - janitor\nimage: 'https://media.giphy.com/media/xUPGcAx3wr7jszFfpe/giphy.gif'\ncode-annotations: hover\n---\n\n::: {.callout-note}\nThis is the second post in the NGSIM data analysis series. Previous post:   \n\n* [Import data](https://itav-ngsim.netlify.app/posts/import/import)  \n\n:::\n\n\n::: {.callout-tip}\n## After completing this post, you will be able to:\n\n* Read parquet files  \n* Do a quick clean-up of column names    \n* Convert integer time to datetime fromat  \n* Sort data by columns  \n* Create new columns  \n* Remove undesired columns  \n* Filter data  \n    \n:::\n\n[This post shows code in `Python`. You can see the same post written in `R` [here](transform_r.qmd).]{.aside}\n\nIn the previous post, we partitioned the Interstate 80 (I80) vehicle trajectories data by time and then saved it on disk:  \n\n![](i80_period.PNG)  \n\nWe now make use of the parquet file in the `period=first` directory for learning to transform data. Since this file is part of partitioned data, I saved it as a separate parquet file (`i80_period1.parquet`) in a different location.    \n\n[You may read the partitioned parquet file also, but R and Python load it slightly differently.]{.aside} \n\nNow, we read the `i80_period1.parquet` file:  \n\n## Load parquet file \n\nReading the parquet file requires the `polars` package:  \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\n\npath_to_first_period_file = \"data/i80_period1.parquet\"\ndata_py = pl.read_parquet(path_to_first_period_file)\n\ndata_py.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 24)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Vehicle_ID</th><th>Frame_ID</th><th>Total_Frames</th><th>Global_Time</th><th>Local_X</th><th>Local_Y</th><th>Global_X</th><th>Global_Y</th><th>v_length</th><th>v_Width</th><th>v_Class</th><th>v_Vel</th><th>v_Acc</th><th>Lane_ID</th><th>O_Zone</th><th>D_Zone</th><th>Int_ID</th><th>Section_ID</th><th>Direction</th><th>Movement</th><th>Preceding</th><th>Following</th><th>Space_Headway</th><th>Time_Headway</th></tr><tr><td>i32</td><td>i32</td><td>i32</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>i32</td><td>f64</td><td>f64</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>3027</td><td>8493</td><td>813</td><td>1113433984200</td><td>53.115</td><td>363.266</td><td>6.0428e6</td><td>2.1334e6</td><td>15.3</td><td>7.4</td><td>2</td><td>21.46</td><td>-8.14</td><td>5</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>3014</td><td>3032</td><td>64.23</td><td>2.99</td></tr><tr><td>3214</td><td>9115</td><td>708</td><td>1113434046400</td><td>67.931</td><td>655.629</td><td>6.0428e6</td><td>2.1337e6</td><td>13.8</td><td>6.3</td><td>2</td><td>15.37</td><td>11.2</td><td>6</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>3221</td><td>3229</td><td>31.71</td><td>2.06</td></tr><tr><td>3199</td><td>9329</td><td>575</td><td>1113434067800</td><td>17.026</td><td>1237.592</td><td>6.0427e6</td><td>2.1343e6</td><td>14.4</td><td>5.9</td><td>2</td><td>39.3</td><td>0.0</td><td>2</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>3188</td><td>3206</td><td>72.36</td><td>1.84</td></tr><tr><td>3159</td><td>8919</td><td>572</td><td>1113434026800</td><td>16.541</td><td>306.905</td><td>6.0428e6</td><td>2.1334e6</td><td>16.4</td><td>5.9</td><td>2</td><td>14.71</td><td>3.61</td><td>2</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>3152</td><td>3171</td><td>51.9</td><td>3.53</td></tr><tr><td>3314</td><td>9324</td><td>616</td><td>1113434067300</td><td>28.846</td><td>65.807</td><td>6.0429e6</td><td>2.1331e6</td><td>14.8</td><td>6.4</td><td>2</td><td>36.24</td><td>0.0</td><td>3</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>3301</td><td>0</td><td>103.26</td><td>2.85</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Clean dataframe names\n\nAs you can see above, the column names are in good shape i.e., without any spaces. However, it is easier typing lowercase letters than the sentence case. So, we use the `clean_names` function from the `janitor` package to make all column names lowercase. If the column names have spaces or periods in them, `clean_names` would replace them with underscores.   \n\nUsing `pyjanitor` requires the data to be a `pandas` dataframe. But we loaded the data from a parquet file using the `polars` package, so we need to first convert the `polars` dataframe to a pandas dataframe. This further requires importing the `pyarrow` package:  \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Installation:\n# pip install pyjanitor\n# pip install pyarrow\n# pip install pandas\n\nimport pandas as pd\nimport pyarrow\nimport janitor\ndata_py = data_py.to_pandas()\ndata_py = data_py.clean_names()\n\ndata_py.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vehicle_id</th>\n      <th>frame_id</th>\n      <th>total_frames</th>\n      <th>global_time</th>\n      <th>local_x</th>\n      <th>local_y</th>\n      <th>global_x</th>\n      <th>global_y</th>\n      <th>v_length</th>\n      <th>v_width</th>\n      <th>...</th>\n      <th>o_zone</th>\n      <th>d_zone</th>\n      <th>int_id</th>\n      <th>section_id</th>\n      <th>direction</th>\n      <th>movement</th>\n      <th>preceding</th>\n      <th>following</th>\n      <th>space_headway</th>\n      <th>time_headway</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3027</td>\n      <td>8493</td>\n      <td>813</td>\n      <td>1113433984200</td>\n      <td>53.115</td>\n      <td>363.266</td>\n      <td>6042839.372</td>\n      <td>2133434.927</td>\n      <td>15.3</td>\n      <td>7.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3014</td>\n      <td>3032</td>\n      <td>64.23</td>\n      <td>2.99</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3214</td>\n      <td>9115</td>\n      <td>708</td>\n      <td>1113434046400</td>\n      <td>67.931</td>\n      <td>655.629</td>\n      <td>6042817.933</td>\n      <td>2133726.884</td>\n      <td>13.8</td>\n      <td>6.3</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3221</td>\n      <td>3229</td>\n      <td>31.71</td>\n      <td>2.06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3199</td>\n      <td>9329</td>\n      <td>575</td>\n      <td>1113434067800</td>\n      <td>17.026</td>\n      <td>1237.592</td>\n      <td>6042683.444</td>\n      <td>2134296.961</td>\n      <td>14.4</td>\n      <td>5.9</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3188</td>\n      <td>3206</td>\n      <td>72.36</td>\n      <td>1.84</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3159</td>\n      <td>8919</td>\n      <td>572</td>\n      <td>1113434026800</td>\n      <td>16.541</td>\n      <td>306.905</td>\n      <td>6042810.096</td>\n      <td>2133374.273</td>\n      <td>16.4</td>\n      <td>5.9</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3152</td>\n      <td>3171</td>\n      <td>51.90</td>\n      <td>3.53</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3314</td>\n      <td>9324</td>\n      <td>616</td>\n      <td>1113434067300</td>\n      <td>28.846</td>\n      <td>65.807</td>\n      <td>6042851.778</td>\n      <td>2133136.617</td>\n      <td>14.8</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3301</td>\n      <td>0</td>\n      <td>103.26</td>\n      <td>2.85</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 24 columns</p>\n</div>\n```\n:::\n:::\n\n\n## How to create a time column?\n\nSince vehicle trajectories change over time, it is nice to see these changes over different time periods. However, the `gloabl_time` column in this dataset contains integers rather than the actual time. So, we create a new column called `actual_time` by dividing the `global_time` by 1000 and converting it to a datetime object.  \n\nIn Python, this can be done via `pandas.to_datetime`. Note that we specify the time zone to be `America/Los_Angeles`.  \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndata_py['actual_time'] = pd.to_datetime(data_py['global_time'] / 1000, \n                                    unit='s', origin='1970-01-01', utc=True)\ndata_py['actual_time'] = data_py['actual_time'].dt.tz_convert('America/Los_Angeles')\n\ndata_py.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vehicle_id</th>\n      <th>frame_id</th>\n      <th>total_frames</th>\n      <th>global_time</th>\n      <th>local_x</th>\n      <th>local_y</th>\n      <th>global_x</th>\n      <th>global_y</th>\n      <th>v_length</th>\n      <th>v_width</th>\n      <th>...</th>\n      <th>d_zone</th>\n      <th>int_id</th>\n      <th>section_id</th>\n      <th>direction</th>\n      <th>movement</th>\n      <th>preceding</th>\n      <th>following</th>\n      <th>space_headway</th>\n      <th>time_headway</th>\n      <th>actual_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3027</td>\n      <td>8493</td>\n      <td>813</td>\n      <td>1113433984200</td>\n      <td>53.115</td>\n      <td>363.266</td>\n      <td>6042839.372</td>\n      <td>2133434.927</td>\n      <td>15.3</td>\n      <td>7.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3014</td>\n      <td>3032</td>\n      <td>64.23</td>\n      <td>2.99</td>\n      <td>2005-04-13 16:13:04.200000048-07:00</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3214</td>\n      <td>9115</td>\n      <td>708</td>\n      <td>1113434046400</td>\n      <td>67.931</td>\n      <td>655.629</td>\n      <td>6042817.933</td>\n      <td>2133726.884</td>\n      <td>13.8</td>\n      <td>6.3</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3221</td>\n      <td>3229</td>\n      <td>31.71</td>\n      <td>2.06</td>\n      <td>2005-04-13 16:14:06.400000095-07:00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3199</td>\n      <td>9329</td>\n      <td>575</td>\n      <td>1113434067800</td>\n      <td>17.026</td>\n      <td>1237.592</td>\n      <td>6042683.444</td>\n      <td>2134296.961</td>\n      <td>14.4</td>\n      <td>5.9</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3188</td>\n      <td>3206</td>\n      <td>72.36</td>\n      <td>1.84</td>\n      <td>2005-04-13 16:14:27.799999952-07:00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3159</td>\n      <td>8919</td>\n      <td>572</td>\n      <td>1113434026800</td>\n      <td>16.541</td>\n      <td>306.905</td>\n      <td>6042810.096</td>\n      <td>2133374.273</td>\n      <td>16.4</td>\n      <td>5.9</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3152</td>\n      <td>3171</td>\n      <td>51.90</td>\n      <td>3.53</td>\n      <td>2005-04-13 16:13:46.799999952-07:00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3314</td>\n      <td>9324</td>\n      <td>616</td>\n      <td>1113434067300</td>\n      <td>28.846</td>\n      <td>65.807</td>\n      <td>6042851.778</td>\n      <td>2133136.617</td>\n      <td>14.8</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3301</td>\n      <td>0</td>\n      <td>103.26</td>\n      <td>2.85</td>\n      <td>2005-04-13 16:14:27.299999952-07:00</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 25 columns</p>\n</div>\n```\n:::\n:::\n\n\nNote that the data is not in the correct order. The `vehicle_id`s in the first two rows are 3027 and 3214. However, we know that the same vehicle was observed for several seconds. This means that we should see a given `vehicle_id` repeated over multiple rows consecutively. We therefore sort by `vehicle_id` and `frame_id`:  \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n## First: Sort by Vehicle ID and Time\ndata_py = data_py.sort_values(by = [\"vehicle_id\", \"frame_id\"])\n\ndata_py.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vehicle_id</th>\n      <th>frame_id</th>\n      <th>total_frames</th>\n      <th>global_time</th>\n      <th>local_x</th>\n      <th>local_y</th>\n      <th>global_x</th>\n      <th>global_y</th>\n      <th>v_length</th>\n      <th>v_width</th>\n      <th>...</th>\n      <th>d_zone</th>\n      <th>int_id</th>\n      <th>section_id</th>\n      <th>direction</th>\n      <th>movement</th>\n      <th>preceding</th>\n      <th>following</th>\n      <th>space_headway</th>\n      <th>time_headway</th>\n      <th>actual_time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1142997</th>\n      <td>1</td>\n      <td>12</td>\n      <td>884</td>\n      <td>1113433136100</td>\n      <td>16.884</td>\n      <td>48.213</td>\n      <td>6042842.116</td>\n      <td>2133117.662</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.099999905-07:00</td>\n    </tr>\n    <tr>\n      <th>1043434</th>\n      <td>1</td>\n      <td>13</td>\n      <td>884</td>\n      <td>1113433136200</td>\n      <td>16.938</td>\n      <td>49.463</td>\n      <td>6042842.012</td>\n      <td>2133118.909</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.200000048-07:00</td>\n    </tr>\n    <tr>\n      <th>272197</th>\n      <td>1</td>\n      <td>14</td>\n      <td>884</td>\n      <td>1113433136300</td>\n      <td>16.991</td>\n      <td>50.712</td>\n      <td>6042841.908</td>\n      <td>2133120.155</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.299999952-07:00</td>\n    </tr>\n    <tr>\n      <th>771912</th>\n      <td>1</td>\n      <td>15</td>\n      <td>884</td>\n      <td>1113433136400</td>\n      <td>17.045</td>\n      <td>51.963</td>\n      <td>6042841.805</td>\n      <td>2133121.402</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.400000095-07:00</td>\n    </tr>\n    <tr>\n      <th>1036275</th>\n      <td>1</td>\n      <td>16</td>\n      <td>884</td>\n      <td>1113433136500</td>\n      <td>17.098</td>\n      <td>53.213</td>\n      <td>6042841.701</td>\n      <td>2133122.649</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.500000-07:00</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 25 columns</p>\n</div>\n```\n:::\n:::\n\n\nWhen we want to compare several vehicle trajectories, e.g., how their speeds change over time regardless of when they were observed, we'd want a common time scale. The NGSIM documentation describes that vehicles were observed at a resolution of 0.1 seconds. So, we can create a`time` variable for each vehicle that starts at 0 and ends at (n-1)/10 where n = number of rows for which a `vehicle_id` is repeated. \n\nWe first define a function `calculate_time_elapsed` that takes in a dataframe and returns the sequence from 0 to (n-1)/10 with a step size of 0.1 as a new column. Then we apply this function on the `pandas` dataframe:  \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef calculate_time_elapsed(group_df):\n    num_rows = len(group_df)\n    group_df['time'] = [i / 10.0 for i in range(num_rows)]\n    return group_df\n\n# Add the time elapsed column to the DataFrame within each group\ndata_py = data_py.groupby('vehicle_id').apply(calculate_time_elapsed)\n\ndata_py.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>vehicle_id</th>\n      <th>frame_id</th>\n      <th>total_frames</th>\n      <th>global_time</th>\n      <th>local_x</th>\n      <th>local_y</th>\n      <th>global_x</th>\n      <th>global_y</th>\n      <th>v_length</th>\n      <th>v_width</th>\n      <th>...</th>\n      <th>int_id</th>\n      <th>section_id</th>\n      <th>direction</th>\n      <th>movement</th>\n      <th>preceding</th>\n      <th>following</th>\n      <th>space_headway</th>\n      <th>time_headway</th>\n      <th>actual_time</th>\n      <th>time</th>\n    </tr>\n    <tr>\n      <th>vehicle_id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">1</th>\n      <th>1142997</th>\n      <td>1</td>\n      <td>12</td>\n      <td>884</td>\n      <td>1113433136100</td>\n      <td>16.884</td>\n      <td>48.213</td>\n      <td>6042842.116</td>\n      <td>2133117.662</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.099999905-07:00</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1043434</th>\n      <td>1</td>\n      <td>13</td>\n      <td>884</td>\n      <td>1113433136200</td>\n      <td>16.938</td>\n      <td>49.463</td>\n      <td>6042842.012</td>\n      <td>2133118.909</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.200000048-07:00</td>\n      <td>0.1</td>\n    </tr>\n    <tr>\n      <th>272197</th>\n      <td>1</td>\n      <td>14</td>\n      <td>884</td>\n      <td>1113433136300</td>\n      <td>16.991</td>\n      <td>50.712</td>\n      <td>6042841.908</td>\n      <td>2133120.155</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.299999952-07:00</td>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>771912</th>\n      <td>1</td>\n      <td>15</td>\n      <td>884</td>\n      <td>1113433136400</td>\n      <td>17.045</td>\n      <td>51.963</td>\n      <td>6042841.805</td>\n      <td>2133121.402</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.400000095-07:00</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>1036275</th>\n      <td>1</td>\n      <td>16</td>\n      <td>884</td>\n      <td>1113433136500</td>\n      <td>17.098</td>\n      <td>53.213</td>\n      <td>6042841.701</td>\n      <td>2133122.649</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.500000-07:00</td>\n      <td>0.4</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 26 columns</p>\n</div>\n```\n:::\n:::\n\n\n## How to create variables for the preceding vehicle?\n\nWe'd often need velocity, acceleration, and other variables for the preceding vehicle (vehicle in front of the subject vehicle). These variables can be useful in car-following modeling.   \n\nIn this dataset, preceding vehicle variables do not exist as separate columns. The only relevant column is `preceding` which is the identifier of the preceding vehicle. But the data also contains the subject vehicle identifier `vehicle_id`, along with these variables:  \n\n* `local_y`: longitudinal position of the front end of the subject vehicle (feet)     \n* `local_x`: lateral position of the front end of the subject vehicle (feet)  \n* `v_length` and `v_width` are the length and width of the subject vehicle (feet)  \n* `v_class` is the class of the subject vehicle, i.e., 1 = motorcycle, 2 = car, and 3 = heavy vehicle (bus/truck)  \n* `v_vel` and `v_acc` are the velocity (ft/s) and acceleration (ft/s/s) of the subject vehicle  \n\nOur goal now is to create new columns of the above variables for the preceding vehicle. To this end, we look for the value of `preceding` in the `vehicle_id` column at a given value of `frame_id` (identifier of time frame) and then grab the value of variable e.g., `v_vel` at that `frame_id`. In Python, we achieve this by joining a few columns of the dataset with the full dataset while using the columns `vehicle_id` and `preceding` for the join:  \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndata_py = data_py.reset_index(drop=True)\n\n## Create new cols\ndata_py = data_py.merge(    # <1>\n  data_py.loc[:, ['frame_id', 'vehicle_id', 'local_x', 'local_y', 'v_length',\n            'v_width', 'v_class', 'v_vel', 'v_acc']] ,    # <2>\n              left_on = ['frame_id', 'preceding'],  # <3>\n              right_on = ['frame_id', 'vehicle_id'],  # <3>\n              how = 'left',  # <4> \n              suffixes=['', '_preceding'] # <5>\n              )\ndata_py = data_py.drop(['vehicle_id_preceding'], axis = 'columns') # <6>\n\ndata_py.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vehicle_id</th>\n      <th>frame_id</th>\n      <th>total_frames</th>\n      <th>global_time</th>\n      <th>local_x</th>\n      <th>local_y</th>\n      <th>global_x</th>\n      <th>global_y</th>\n      <th>v_length</th>\n      <th>v_width</th>\n      <th>...</th>\n      <th>time_headway</th>\n      <th>actual_time</th>\n      <th>time</th>\n      <th>local_x_preceding</th>\n      <th>local_y_preceding</th>\n      <th>v_length_preceding</th>\n      <th>v_width_preceding</th>\n      <th>v_class_preceding</th>\n      <th>v_vel_preceding</th>\n      <th>v_acc_preceding</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>12</td>\n      <td>884</td>\n      <td>1113433136100</td>\n      <td>16.884</td>\n      <td>48.213</td>\n      <td>6042842.116</td>\n      <td>2133117.662</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.099999905-07:00</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>13</td>\n      <td>884</td>\n      <td>1113433136200</td>\n      <td>16.938</td>\n      <td>49.463</td>\n      <td>6042842.012</td>\n      <td>2133118.909</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.200000048-07:00</td>\n      <td>0.1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>14</td>\n      <td>884</td>\n      <td>1113433136300</td>\n      <td>16.991</td>\n      <td>50.712</td>\n      <td>6042841.908</td>\n      <td>2133120.155</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.299999952-07:00</td>\n      <td>0.2</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>15</td>\n      <td>884</td>\n      <td>1113433136400</td>\n      <td>17.045</td>\n      <td>51.963</td>\n      <td>6042841.805</td>\n      <td>2133121.402</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.400000095-07:00</td>\n      <td>0.3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>16</td>\n      <td>884</td>\n      <td>1113433136500</td>\n      <td>17.098</td>\n      <td>53.213</td>\n      <td>6042841.701</td>\n      <td>2133122.649</td>\n      <td>14.3</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>2005-04-13 15:58:56.500000-07:00</td>\n      <td>0.4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 33 columns</p>\n</div>\n```\n:::\n:::\n\n\n1. `merge` is used for joining `pandas` dataframes.  \n2. This is part of the `data_py` dataframe. It includes those variables of the subject vehicle that we want to create for the preceding vehicle.  \n3.  `data_py` is the \"left\" dataframe and `data_py.loc[:, ['frame_id', 'vehicle_id', 'local_x', 'local_y', 'v_length', 'v_width', 'v_class', 'v_vel', 'v_acc']]` is the \"right\" dataframe. At a given `frame_id`, 'local_x', 'local_y', 'v_length', 'v_width', 'v_class', 'v_vel', 'v_acc' are joined with `data_py` using the `preceding` and `vehicle_id` columns.   \n4. The type of join is \"left\".  \n5. A suffix `_preceding` is added to show that these variables are for the preceding vehicle.  \n6. This operation created a redundant preceding vehicle ID that we drop here.    \n        \n\nA `NaN` or `null` value indicates missing value. In this dataset, `NaN` / `null` indicates that the value is missing because there was no preceding vehicle observed. For `vehicle_id` 1 we can see this is true because the `preceding` value is 0. \n\n\nTo keep the column names consistent with the result in the same post with `R` code, we rename the preceding vehicle variables:  \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndata_py = pl.from_pandas(data_py) # <1> \n\ndata_py = data_py.rename({  # <2>\n    \"local_y_preceding\":\"preceding_local_y\", \n    \"v_length_preceding\":\"preceding_length\", \n    \"v_width_preceding\":\"preceding_width\", \n    \"v_class_preceding\":\"preceding_class\", \n    \"v_vel_preceding\":\"preceding_vel\", \n    \"v_acc_preceding\":\"preceding_acc\"\n    })\n    \ndata_py.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n['vehicle_id',\n 'frame_id',\n 'total_frames',\n 'global_time',\n 'local_x',\n 'local_y',\n 'global_x',\n 'global_y',\n 'v_length',\n 'v_width',\n 'v_class',\n 'v_vel',\n 'v_acc',\n 'lane_id',\n 'o_zone',\n 'd_zone',\n 'int_id',\n 'section_id',\n 'direction',\n 'movement',\n 'preceding',\n 'following',\n 'space_headway',\n 'time_headway',\n 'actual_time',\n 'time',\n 'local_x_preceding',\n 'preceding_local_y',\n 'preceding_length',\n 'preceding_width',\n 'preceding_class',\n 'preceding_vel',\n 'preceding_acc']\n```\n:::\n:::\n\n\n1. Convert the `pandas` dataframe to `polars` dataframe. \n2. Use the `polars.rename` function to rename the columns.  \n\n\n\n## How to remove undesired columns?\n\nThere are several variables in this dataset that we don't need as they are completely devoid of any value. So we remove them: \n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndata_py = data_py.drop([\"total_frames\", \"global_x\", \"global_y\", \"following\", \n              \"o_zone\", \"d_zone\", \"int_id\", \"section_id\", \"direction\", \n             \"movement\"])\n             \ndata_py.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 23)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>vehicle_id</th><th>frame_id</th><th>global_time</th><th>local_x</th><th>local_y</th><th>v_length</th><th>v_width</th><th>v_class</th><th>v_vel</th><th>v_acc</th><th>lane_id</th><th>preceding</th><th>space_headway</th><th>time_headway</th><th>actual_time</th><th>time</th><th>local_x_preceding</th><th>preceding_local_y</th><th>preceding_length</th><th>preceding_width</th><th>preceding_class</th><th>preceding_vel</th><th>preceding_acc</th></tr><tr><td>i32</td><td>i32</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>i32</td><td>f64</td><td>f64</td><td>i32</td><td>i32</td><td>f64</td><td>f64</td><td>datetime[ns, America/Los_Angeles]</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>12</td><td>1113433136100</td><td>16.884</td><td>48.213</td><td>14.3</td><td>6.4</td><td>2</td><td>12.5</td><td>0.0</td><td>2</td><td>0</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.099999905 PDT</td><td>0.0</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1</td><td>13</td><td>1113433136200</td><td>16.938</td><td>49.463</td><td>14.3</td><td>6.4</td><td>2</td><td>12.5</td><td>0.0</td><td>2</td><td>0</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.200000048 PDT</td><td>0.1</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1</td><td>14</td><td>1113433136300</td><td>16.991</td><td>50.712</td><td>14.3</td><td>6.4</td><td>2</td><td>12.5</td><td>0.0</td><td>2</td><td>0</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.299999952 PDT</td><td>0.2</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1</td><td>15</td><td>1113433136400</td><td>17.045</td><td>51.963</td><td>14.3</td><td>6.4</td><td>2</td><td>12.5</td><td>0.0</td><td>2</td><td>0</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.400000095 PDT</td><td>0.3</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1</td><td>16</td><td>1113433136500</td><td>17.098</td><td>53.213</td><td>14.3</td><td>6.4</td><td>2</td><td>12.5</td><td>0.0</td><td>2</td><td>0</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.500 PDT</td><td>0.4</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## How to transform multiple columns?\n\n### Metric units\n\n![](https://media.giphy.com/media/xUPGcAx3wr7jszFfpe/giphy.gif)  \n\nAs discussed before, variables in this dataset have imperial units (feet, ft/s, etc.). You may want to transform the values of these variables to metric units. The conversion factor is 0.3048. Here, we utilize the `polars.with_columns` function to take all the desired columns (`cols_to_convert_to_metric`) and apply the conversion factor along with rounding to 2 decimal places:  \n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n## convert to metric\ncols_to_convert_to_metric = ['local_x', 'local_y', 'v_length', 'v_width', \n        'v_vel', 'v_acc', 'space_headway', 'preceding_local_y',\n        'preceding_length', 'preceding_width', 'preceding_vel',\n       'preceding_acc']\n\ndata_py = data_py.with_columns((pl.col(cols_to_convert_to_metric) * .3048).round(2))\n\ndata_py.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 23)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>vehicle_id</th><th>frame_id</th><th>global_time</th><th>local_x</th><th>local_y</th><th>v_length</th><th>v_width</th><th>v_class</th><th>v_vel</th><th>v_acc</th><th>lane_id</th><th>preceding</th><th>space_headway</th><th>time_headway</th><th>actual_time</th><th>time</th><th>local_x_preceding</th><th>preceding_local_y</th><th>preceding_length</th><th>preceding_width</th><th>preceding_class</th><th>preceding_vel</th><th>preceding_acc</th></tr><tr><td>i32</td><td>i32</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>i32</td><td>f64</td><td>f64</td><td>i32</td><td>i32</td><td>f64</td><td>f64</td><td>datetime[ns, America/Los_Angeles]</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>1</td><td>12</td><td>1113433136100</td><td>5.15</td><td>14.7</td><td>4.36</td><td>1.95</td><td>2</td><td>3.81</td><td>0.0</td><td>2</td><td>0</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.099999905 PDT</td><td>0.0</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1</td><td>13</td><td>1113433136200</td><td>5.16</td><td>15.08</td><td>4.36</td><td>1.95</td><td>2</td><td>3.81</td><td>0.0</td><td>2</td><td>0</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.200000048 PDT</td><td>0.1</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1</td><td>14</td><td>1113433136300</td><td>5.18</td><td>15.46</td><td>4.36</td><td>1.95</td><td>2</td><td>3.81</td><td>0.0</td><td>2</td><td>0</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.299999952 PDT</td><td>0.2</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1</td><td>15</td><td>1113433136400</td><td>5.2</td><td>15.84</td><td>4.36</td><td>1.95</td><td>2</td><td>3.81</td><td>0.0</td><td>2</td><td>0</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.400000095 PDT</td><td>0.3</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1</td><td>16</td><td>1113433136500</td><td>5.21</td><td>16.22</td><td>4.36</td><td>1.95</td><td>2</td><td>3.81</td><td>0.0</td><td>2</td><td>0</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.500 PDT</td><td>0.4</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### Convert numbers/strings to categorical data type\n\nMoreover, we know that there are variables that should be treated as categorical (qualitative) rather than numbers or strings. For instance, `lane_id` has values 1-7 and we know that these are identifiers for lanes. Similarly, the class of a vehicle is encoded as 1, 2, and 3 but we know that these numbers do not have any quantitaive information, rather they are categories.   \n\nIn `polars`, categorical data is encoded as `polars.Categorical` data type:   \n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n## change the data type to categorical\ncols_to_convert_to_categorical = ['vehicle_id', 'v_class', 'lane_id', \n                             'preceding', 'preceding_class']\ndata_py = data_py.with_columns(pl.col(cols_to_convert_to_categorical).cast(pl.String).cast(pl.Categorical)) # <1>\n\ndata_py.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 23)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>vehicle_id</th><th>frame_id</th><th>global_time</th><th>local_x</th><th>local_y</th><th>v_length</th><th>v_width</th><th>v_class</th><th>v_vel</th><th>v_acc</th><th>lane_id</th><th>preceding</th><th>space_headway</th><th>time_headway</th><th>actual_time</th><th>time</th><th>local_x_preceding</th><th>preceding_local_y</th><th>preceding_length</th><th>preceding_width</th><th>preceding_class</th><th>preceding_vel</th><th>preceding_acc</th></tr><tr><td>cat</td><td>i32</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>cat</td><td>f64</td><td>f64</td><td>cat</td><td>cat</td><td>f64</td><td>f64</td><td>datetime[ns, America/Los_Angeles]</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>cat</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;1&quot;</td><td>12</td><td>1113433136100</td><td>5.15</td><td>14.7</td><td>4.36</td><td>1.95</td><td>&quot;2&quot;</td><td>3.81</td><td>0.0</td><td>&quot;2&quot;</td><td>&quot;0&quot;</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.099999905 PDT</td><td>0.0</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;1&quot;</td><td>13</td><td>1113433136200</td><td>5.16</td><td>15.08</td><td>4.36</td><td>1.95</td><td>&quot;2&quot;</td><td>3.81</td><td>0.0</td><td>&quot;2&quot;</td><td>&quot;0&quot;</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.200000048 PDT</td><td>0.1</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;1&quot;</td><td>14</td><td>1113433136300</td><td>5.18</td><td>15.46</td><td>4.36</td><td>1.95</td><td>&quot;2&quot;</td><td>3.81</td><td>0.0</td><td>&quot;2&quot;</td><td>&quot;0&quot;</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.299999952 PDT</td><td>0.2</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;1&quot;</td><td>15</td><td>1113433136400</td><td>5.2</td><td>15.84</td><td>4.36</td><td>1.95</td><td>&quot;2&quot;</td><td>3.81</td><td>0.0</td><td>&quot;2&quot;</td><td>&quot;0&quot;</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.400000095 PDT</td><td>0.3</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>&quot;1&quot;</td><td>16</td><td>1113433136500</td><td>5.21</td><td>16.22</td><td>4.36</td><td>1.95</td><td>&quot;2&quot;</td><td>3.81</td><td>0.0</td><td>&quot;2&quot;</td><td>&quot;0&quot;</td><td>0.0</td><td>0.0</td><td>2005-04-13 15:58:56.500 PDT</td><td>0.4</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n1. Columns are first converted to string data type and then the strings are converted to categorical data type.  \n\n\n\n\n## Visualization with one vehicle\n\nCool! We are almost done with transforming our dataset. It is time to do some visualization. The last transformation we learn is to filter the data to keep only one vehicle:  \n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndata_py_veh = data_py.filter(pl.col('vehicle_id') == \"2\")\n```\n:::\n\n\nAnd now we use `ggplot2` to create a plot of velocity over time. Subject vehicle in blue and preceding vehicle in orange. \n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfrom lets_plot import *\nLetsPlot.setup_html()\n(\nggplot(data = data_py_veh) +\\\n  geom_path(mapping = aes(x = 'time', y = 'v_vel'), color = 'blue') +\\\n  geom_path(mapping = aes(x = 'time', y = 'preceding_vel'), color = 'orange') +\\\n  labs(x = \"Time (s)\", y = \"Velocity (m/s)\",\n       title = \"Velocity of vehicle # 2 and its preceding vehicle\") +\\\n  theme_minimal()\n)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"FPqo9q\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.2.0/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"FPqo9q\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"FPqo9q\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n   <div id=\"5CaQws\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n       (function() {\n           var plotSpec={\n\"data\":{\n\"v_vel\":[4.36,4.36,4.36,4.36,4.36,4.36,3.96,3.59,3.29,3.11,3.04,3.04,3.04,3.05,3.06,3.04,2.92,2.67,2.31,1.96,1.71,1.58,1.56,1.57,1.58,1.58,1.58,1.58,1.57,1.57,1.58,1.58,1.58,1.58,1.58,1.58,1.58,1.58,1.58,1.58,1.58,1.58,1.58,1.58,1.58,1.53,1.36,1.07,0.69,0.37,0.2,0.21,0.3,0.34,0.27,0.16,0.0,0.35,0.59,0.73,0.75,0.76,0.88,1.16,1.5,1.77,1.91,1.93,1.86,1.8,1.91,2.23,2.74,3.34,3.86,4.22,4.4,4.44,4.43,4.43,4.43,4.43,4.44,4.47,4.5,4.54,4.56,4.57,4.57,4.57,4.57,4.56,4.58,4.67,4.88,5.18,5.49,5.7,5.79,5.81,5.79,5.78,5.86,6.09,6.48,7.01,7.53,7.93,8.16,8.24,8.23,8.22,8.24,8.36,8.62,9.01,9.45,9.84,10.08,10.19,10.21,10.21,10.18,10.02,9.69,9.15,8.48,7.8,7.25,6.98,6.99,7.14,7.23,7.21,7.14,7.11,7.12,7.09,7.04,7.06,7.22,7.53,7.84,7.94,7.87,7.78,7.83,8.11,8.51,8.86,9.07,9.15,9.15,9.14,9.14,9.14,9.13,9.12,9.11,9.18,9.37,9.67,10.01,10.27,10.42,10.52,10.55,10.54,10.58,10.73,11.05,11.42,11.63,11.66,11.56,11.43,11.33,11.26,11.21,11.2,11.2,11.17,11.06,10.91,10.82,10.89,11.07,11.17,11.09,10.88,10.7,10.64,10.69,10.74,10.72,10.63,10.51,10.42,10.42,10.52,10.69,10.88,10.98,11.01,11.06,11.18,11.29,11.29,11.17,11.08,11.15,11.31,11.44,11.42,11.31,11.18,11.06,10.91,10.77,10.67,10.66,10.75,10.92,11.16,11.43,11.7,11.94,12.08,12.07,11.94,11.81,11.81,11.93,12.08,12.18,12.2,12.2,12.19,12.19,12.19,12.19,12.2,12.2,12.2,12.2,12.19,12.18,12.17,12.23,12.39,12.66,12.94,13.15,13.25,13.27,13.26,13.25,13.26,13.36,13.57,13.86,14.15,14.35,14.44,14.47,14.48,14.48,14.48,14.48,14.48,14.48,14.48,14.48,14.48,14.48,14.47,14.47,14.51,14.67,14.97,15.39,15.8,16.11,16.27,16.32,16.31,16.31,16.31,16.29,16.25,16.2,16.14,16.08,16.05,16.05,16.08,16.11,16.1,16.08,16.07,16.14,16.3,16.54,16.82,17.16,17.54,17.89,18.14,18.27,18.3,18.29,18.3,18.3,18.25,18.11,17.92,17.81,17.84,18.0,18.18,18.27,18.29,18.28,18.27,18.28,18.39,18.68,19.16,19.79,20.43,20.92,21.18,21.17,20.92,20.56,20.21,19.95,19.82,19.74,19.65,19.5,19.35,19.25,19.25,19.34,19.49,19.64,19.74,19.79,19.82,19.83,19.8,19.67,19.44,19.21,19.2,19.51,20.1,20.8,21.45,21.91,22.16,22.15,21.9,21.44,20.81,20.1,19.51,19.2,19.21,19.44,19.67,19.8,19.83,19.82,19.81,19.8,19.82,19.91,20.08,20.32,20.56,20.72,20.81,20.87,20.92,20.96,20.98,21.06,21.26,21.57,21.85,21.94,21.86,21.7,21.59,21.61,21.77,22.08,22.48,22.84,23.08,23.15,23.05,22.81,22.5,22.19,21.97,21.85,21.8,21.8,21.86,21.86,21.86,21.86],\n\"time\":[0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4.0,4.1,4.2,4.3,4.4,4.5,4.6,4.7,4.8,4.9,5.0,5.1,5.2,5.3,5.4,5.5,5.6,5.7,5.8,5.9,6.0,6.1,6.2,6.3,6.4,6.5,6.6,6.7,6.8,6.9,7.0,7.1,7.2,7.3,7.4,7.5,7.6,7.7,7.8,7.9,8.0,8.1,8.2,8.3,8.4,8.5,8.6,8.7,8.8,8.9,9.0,9.1,9.2,9.3,9.4,9.5,9.6,9.7,9.8,9.9,10.0,10.1,10.2,10.3,10.4,10.5,10.6,10.7,10.8,10.9,11.0,11.1,11.2,11.3,11.4,11.5,11.6,11.7,11.8,11.9,12.0,12.1,12.2,12.3,12.4,12.5,12.6,12.7,12.8,12.9,13.0,13.1,13.2,13.3,13.4,13.5,13.6,13.7,13.8,13.9,14.0,14.1,14.2,14.3,14.4,14.5,14.6,14.7,14.8,14.9,15.0,15.1,15.2,15.3,15.4,15.5,15.6,15.7,15.8,15.9,16.0,16.1,16.2,16.3,16.4,16.5,16.6,16.7,16.8,16.9,17.0,17.1,17.2,17.3,17.4,17.5,17.6,17.7,17.8,17.9,18.0,18.1,18.2,18.3,18.4,18.5,18.6,18.7,18.8,18.9,19.0,19.1,19.2,19.3,19.4,19.5,19.6,19.7,19.8,19.9,20.0,20.1,20.2,20.3,20.4,20.5,20.6,20.7,20.8,20.9,21.0,21.1,21.2,21.3,21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,22.3,22.4,22.5,22.6,22.7,22.8,22.9,23.0,23.1,23.2,23.3,23.4,23.5,23.6,23.7,23.8,23.9,24.0,24.1,24.2,24.3,24.4,24.5,24.6,24.7,24.8,24.9,25.0,25.1,25.2,25.3,25.4,25.5,25.6,25.7,25.8,25.9,26.0,26.1,26.2,26.3,26.4,26.5,26.6,26.7,26.8,26.9,27.0,27.1,27.2,27.3,27.4,27.5,27.6,27.7,27.8,27.9,28.0,28.1,28.2,28.3,28.4,28.5,28.6,28.7,28.8,28.9,29.0,29.1,29.2,29.3,29.4,29.5,29.6,29.7,29.8,29.9,30.0,30.1,30.2,30.3,30.4,30.5,30.6,30.7,30.8,30.9,31.0,31.1,31.2,31.3,31.4,31.5,31.6,31.7,31.8,31.9,32.0,32.1,32.2,32.3,32.4,32.5,32.6,32.7,32.8,32.9,33.0,33.1,33.2,33.3,33.4,33.5,33.6,33.7,33.8,33.9,34.0,34.1,34.2,34.3,34.4,34.5,34.6,34.7,34.8,34.9,35.0,35.1,35.2,35.3,35.4,35.5,35.6,35.7,35.8,35.9,36.0,36.1,36.2,36.3,36.4,36.5,36.6,36.7,36.8,36.9,37.0,37.1,37.2,37.3,37.4,37.5,37.6,37.7,37.8,37.9,38.0,38.1,38.2,38.3,38.4,38.5,38.6,38.7,38.8,38.9,39.0,39.1,39.2,39.3,39.4,39.5,39.6,39.7,39.8,39.9,40.0,40.1,40.2,40.3,40.4,40.5,40.6,40.7,40.8,40.9,41.0,41.1,41.2,41.3,41.4],\n\"preceding_vel\":[2.95,2.82,2.55,2.18,1.8,1.53,1.39,1.36,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.37,1.38,1.39,1.35,1.23,1.06,0.91,0.83,0.79,0.71,0.61,0.52,0.51,0.63,0.84,1.06,1.24,1.39,1.52,1.66,1.8,1.98,2.22,2.48,2.7,2.89,3.15,3.54,4.05,4.64,5.18,5.6,5.83,5.91,5.91,5.9,5.9,5.9,5.9,5.9,5.9,5.9,5.9,5.9,5.9,5.9,5.9,5.9,5.9,5.9,5.9,5.9,5.92,5.9,5.79,5.54,5.17,4.81,4.64,4.71,4.98,5.32,5.56,5.6,5.45,5.26,5.2,5.38,5.68,5.95,6.05,6.02,5.99,6.0,6.01,5.98,5.93,6.01,6.32,6.82,7.37,7.82,8.1,8.23,8.24,8.23,8.23,8.23,8.24,8.27,8.31,8.34,8.36,8.36,8.35,8.35,8.36,8.38,8.38,8.38,8.38,8.38,8.38,8.38,8.38,8.37,8.36,8.41,8.57,8.88,9.3,9.71,10.02,10.18,10.22,10.22,10.22,10.18,10.04,9.77,9.42,9.12,8.97,8.97,9.05,9.11,9.13,9.14,9.15,9.12,9.05,9.01,9.06,9.2,9.44,9.68,9.84,9.88,9.85,9.79,9.77,9.76,9.69,9.53,9.3,9.07,8.91,8.84,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]\n},\n\"mapping\":{\n},\n\"data_meta\":{\n},\n\"ggtitle\":{\n\"text\":\"Velocity of vehicle # 2 and its preceding vehicle\"\n},\n\"theme\":{\n\"name\":\"minimal\"\n},\n\"kind\":\"plot\",\n\"scales\":[{\n\"name\":\"Time (s)\",\n\"aesthetic\":\"x\"\n},{\n\"name\":\"Velocity (m/s)\",\n\"aesthetic\":\"y\"\n}],\n\"layers\":[{\n\"geom\":\"path\",\n\"mapping\":{\n\"x\":\"time\",\n\"y\":\"v_vel\"\n},\n\"data_meta\":{\n},\n\"color\":\"blue\",\n\"data\":{\n}\n},{\n\"geom\":\"path\",\n\"mapping\":{\n\"x\":\"time\",\n\"y\":\"preceding_vel\"\n},\n\"data_meta\":{\n},\n\"color\":\"orange\",\n\"data\":{\n}\n}],\n\"metainfo_list\":[]\n};\n           var plotContainer = document.getElementById(\"5CaQws\");\n           window.letsPlotCall(function() {{\n               LetsPlot.buildPlotFromProcessedSpecs(plotSpec, -1, -1, plotContainer);\n           }});\n       })();    \n   </script>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "transform_py_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}