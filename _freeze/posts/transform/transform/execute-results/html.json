{
  "hash": "0c9322eaba926677a6f2dd9e27531dc0",
  "result": {
    "markdown": "---\ntitle: \"Transform Data\"\ndate: \"2024-01-20\"\ncategories: [import, transform, dplyr, pandas, polars, arrow, janitor]\nimage: \"trajectories.gif\"\ncode-annotations: hover\nengine: jupyter\n---\n\n```{r setup}\n#| echo: false\nreticulate::use_python(\"C:\\\\Users\\\\umair\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\python.exe\")\n```\n\n```{r}\n#| eval: false\n\nlibrary(arrow)\nlibrary(dplyr)\n\npath_to_partitioned_first_period_file <- \"D:/ngsim/posts/import/data/I80/period=first/part-0.parquet\"\n\nopen_dataset(path_to_partitioned_first_period_file) |>\n  dplyr::collect() |>\n  arrow::write_parquet(sink = \"data/i80_period1.parquet\")\n```\n\n\n\n## Load parquet file \n\n::: {.panel-tabset group=\"language\"}\n### R\n\n```{r rread}\nlibrary(arrow)\nlibrary(dplyr)\n\npath_to_first_period_file <- \"data/i80_period1.parquet\"\ndata_R <- arrow::read_parquet(file = path_to_first_period_file)\n\ndata_R\n```\n\n\n### Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport polars as pl\n\npath_to_first_period_file = \"data/i80_period1.parquet\"\ndata_py = pl.read_parquet(path_to_first_period_file)\n\ndata_py.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 24)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Vehicle_ID</th><th>Frame_ID</th><th>Total_Frames</th><th>Global_Time</th><th>Local_X</th><th>Local_Y</th><th>Global_X</th><th>Global_Y</th><th>v_length</th><th>v_Width</th><th>v_Class</th><th>v_Vel</th><th>v_Acc</th><th>Lane_ID</th><th>O_Zone</th><th>D_Zone</th><th>Int_ID</th><th>Section_ID</th><th>Direction</th><th>Movement</th><th>Preceding</th><th>Following</th><th>Space_Headway</th><th>Time_Headway</th></tr><tr><td>i32</td><td>i32</td><td>i32</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>i32</td><td>f64</td><td>f64</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>i32</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>3027</td><td>8493</td><td>813</td><td>1113433984200</td><td>53.115</td><td>363.266</td><td>6.0428e6</td><td>2.1334e6</td><td>15.3</td><td>7.4</td><td>2</td><td>21.46</td><td>-8.14</td><td>5</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>3014</td><td>3032</td><td>64.23</td><td>2.99</td></tr><tr><td>3214</td><td>9115</td><td>708</td><td>1113434046400</td><td>67.931</td><td>655.629</td><td>6.0428e6</td><td>2.1337e6</td><td>13.8</td><td>6.3</td><td>2</td><td>15.37</td><td>11.2</td><td>6</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>3221</td><td>3229</td><td>31.71</td><td>2.06</td></tr><tr><td>3199</td><td>9329</td><td>575</td><td>1113434067800</td><td>17.026</td><td>1237.592</td><td>6.0427e6</td><td>2.1343e6</td><td>14.4</td><td>5.9</td><td>2</td><td>39.3</td><td>0.0</td><td>2</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>3188</td><td>3206</td><td>72.36</td><td>1.84</td></tr><tr><td>3159</td><td>8919</td><td>572</td><td>1113434026800</td><td>16.541</td><td>306.905</td><td>6.0428e6</td><td>2.1334e6</td><td>16.4</td><td>5.9</td><td>2</td><td>14.71</td><td>3.61</td><td>2</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>3152</td><td>3171</td><td>51.9</td><td>3.53</td></tr><tr><td>3314</td><td>9324</td><td>616</td><td>1113434067300</td><td>28.846</td><td>65.807</td><td>6.0429e6</td><td>2.1331e6</td><td>14.8</td><td>6.4</td><td>2</td><td>36.24</td><td>0.0</td><td>3</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>3301</td><td>0</td><td>103.26</td><td>2.85</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n:::\n\n\n## Clean dataframe names\n\n::: {.panel-tabset group=\"language\"}\n### R\n\n```{r rclean}\nlibrary(janitor)\ndata_R <- janitor::clean_names(data_R) \n```\n\n\n### Python\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport pyarrow\nimport janitor\ndata_py = data_py.to_pandas()\ndata_py = data_py.clean_names()\n\ndata_py.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>vehicle_id</th>\n      <th>frame_id</th>\n      <th>total_frames</th>\n      <th>global_time</th>\n      <th>local_x</th>\n      <th>local_y</th>\n      <th>global_x</th>\n      <th>global_y</th>\n      <th>v_length</th>\n      <th>v_width</th>\n      <th>...</th>\n      <th>o_zone</th>\n      <th>d_zone</th>\n      <th>int_id</th>\n      <th>section_id</th>\n      <th>direction</th>\n      <th>movement</th>\n      <th>preceding</th>\n      <th>following</th>\n      <th>space_headway</th>\n      <th>time_headway</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3027</td>\n      <td>8493</td>\n      <td>813</td>\n      <td>1113433984200</td>\n      <td>53.115</td>\n      <td>363.266</td>\n      <td>6042839.372</td>\n      <td>2133434.927</td>\n      <td>15.3</td>\n      <td>7.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3014</td>\n      <td>3032</td>\n      <td>64.23</td>\n      <td>2.99</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3214</td>\n      <td>9115</td>\n      <td>708</td>\n      <td>1113434046400</td>\n      <td>67.931</td>\n      <td>655.629</td>\n      <td>6042817.933</td>\n      <td>2133726.884</td>\n      <td>13.8</td>\n      <td>6.3</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3221</td>\n      <td>3229</td>\n      <td>31.71</td>\n      <td>2.06</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3199</td>\n      <td>9329</td>\n      <td>575</td>\n      <td>1113434067800</td>\n      <td>17.026</td>\n      <td>1237.592</td>\n      <td>6042683.444</td>\n      <td>2134296.961</td>\n      <td>14.4</td>\n      <td>5.9</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3188</td>\n      <td>3206</td>\n      <td>72.36</td>\n      <td>1.84</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3159</td>\n      <td>8919</td>\n      <td>572</td>\n      <td>1113434026800</td>\n      <td>16.541</td>\n      <td>306.905</td>\n      <td>6042810.096</td>\n      <td>2133374.273</td>\n      <td>16.4</td>\n      <td>5.9</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3152</td>\n      <td>3171</td>\n      <td>51.90</td>\n      <td>3.53</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3314</td>\n      <td>9324</td>\n      <td>616</td>\n      <td>1113434067300</td>\n      <td>28.846</td>\n      <td>65.807</td>\n      <td>6042851.778</td>\n      <td>2133136.617</td>\n      <td>14.8</td>\n      <td>6.4</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3301</td>\n      <td>0</td>\n      <td>103.26</td>\n      <td>2.85</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 24 columns</p>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n## How to create a time column?\n\n::: {.panel-tabset group=\"language\"}\n### R\n\n```{r rtime1}\nlibrary(lubridate)\n\ndata_R <- data_R |>\n  dplyr::mutate(actual_time = lubridate::as_datetime(global_time / 1000, \n    origin = \"1970-01-01\",\n    tz = \"America/Los_Angeles\"\n  ))\n```\n\n```{r rtime2}\ndata_R <- data_R |> \n  group_by(vehicle_id) |> \n  mutate(time = (0:(n()-1))/10) |> \n  ungroup()\n\nhead(data_R)\n```\n\n\n\n\n### Python\n\n:::\n\n",
    "supporting": [
      "transform_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}